snippet { "block" i
${0} {
	${1:${VISUAL}}
}
endsnippet
snippet $
document.querySelectorAll(${1:'${2}'})
endsnippet
snippet if
if (${1}) {
	${0:${VISUAL}}
}
endsnippet
snippet own "hasOwnProperty()" i
hasOwnProperty(${1})
endsnippet
snippet p "@param"
@param {${1:String}} ${2:name} ${0}
endsnippet
snippet ret "@return"
@return {${1:String}} ${0}
endsnippet
snippet type "@type"
@type {${1:String}} ${0}
endsnippet
snippet pro "new Promise()" i
new Promise((resolve, reject) => {
	${0}
})${1:;}
endsnippet
snippet then "Promise.then(succ)" i
then(${2:data} => {
	${0}
})${1:;}
endsnippet
snippet catch "Promise.catch(err)" i
catch(${2:err} => {
	${0}
})${1:;}
endsnippet
snippet l "console.log()"
console.log(${0});
endsnippet
snippet it "Array's filter & forEach & ..." i
${1:filter}(${2:item} => {
	${0}
})${4:;}
endsnippet
snippet each "Array.forEach" i
forEach(${1:item} => {
	${0}
})${3:;}
endsnippet
snippet map "Array.map" i
map(${1:item} => {
	${0}
})${3:;}
endsnippet
snippet io "indexOf !== -1" i
${1:container}.indexOf(${2:inner}) !== -1${0}
endsnippet
snippet try
try {
	${0:${VISUAL}}
} catch (err) {
}
endsnippet
snippet = "arrow function" i
(${1}) => {
	${0}
}
endsnippet
snippet const
const { ${1} } = ${0:this};
endsnippet

snippet webpack
module.exports = {
  entry: './index.js',
  output: {
    filename: 'bundle.js'
  },
  module: {
    loaders: [{
      test: /\.js$/,
      exclude: /node_modules/,
      loader: 'babel-loader',
      query: {
        presets: ['es2015', 'stage-0', 'react'],
      }
    }]
  }
};
endsnippet
snippet for
for (let ${1:i} = 0; $1 < ${2:list}.length; $1++) {
	const ${3:item} = $2[$1];
	${0:${VISUAL}}
}
endsnippet
